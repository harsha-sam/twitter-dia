version: '3'
services:
  neo4j_db:
    build:
      context: ./neo4j
      dockerfile: Dockerfile
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    env_file:
      - ./.env.dev
    volumes:
      - ./neo4j/conf:/var/lib/neo4j/conf
      - ./neo4j/import:/var/lib/neo4j/import
      - neo4j_data:/var/lib/neo4j/data
      - neo4j_logs:/var/lib/neo4j/logs
      - neo4j_plugins:/var/lib/neo4j/plugins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      timeout: 10s
      retries: 3
      start_period: 5m
  
  migration:
    build:
      context: ./migration
      dockerfile: Dockerfile
    depends_on:
      neo4j_db:
        condition: service_healthy
    env_file:
      - ./.env.dev
  
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - zookeeper1-data:/var/lib/zookeeper/data
      - zookeeper1-log:/var/lib/zookeeper/log

  zookeeper-2:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2182:2182"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - zookeeper2-data:/var/lib/zookeeper/data
      - zookeeper2-log:/var/lib/zookeeper/log
  
  zookeeper-3:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2183:2183"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zoozookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - zookeeper3-data:/var/lib/zookeeper/data
      - zookeeper3-log:/var/lib/zookeeper/log

  kafka-1:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183"
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    volumes:
      - kafka1-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-2:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183"
      KAFKA_BROKER_ID: 2
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    volumes:
      - kafka2-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9093"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-3:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183"
      KAFKA_BROKER_ID: 3
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    volumes:
      - kafka3-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9094"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  flask-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    depends_on:
      neo4j_db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    env_file:
      - ./.env.dev
  
  spark-master:
    image: bitnami/spark:3
    environment:
      SPARK_MODE: master
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
      SPARK_LOG_LEVEL: INFO
    ports:
      - "8080:8080"
      - "7077:7077"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  spark-worker-1:
    image: bitnami/spark:3
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_CORES: 1
      SPARK_LOG_LEVEL: INFO
    ports:
      - "8081:8081"
    depends_on:
      - spark-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  spark-worker-2:
    image: bitnami/spark:3
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_WEBUI_PORT: 8082
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_CORES: 1
      SPARK_LOG_LEVEL: INFO
    ports:
      - "8082:8082"
    depends_on:
      - spark-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
  sentiment-streaming-service:
    build:
      context: ./sentiment-streaming-service
      dockerfile: Dockerfile
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      spark-master:
        condition: service_healthy
      spark-worker-1:
        condition: service_healthy
      spark-worker-2:
        condition: service_healthy
    env_file:
      - ./.env.dev
  
  sentiment-consumer-service:
    build:
      context: ./sentiment-consumer-service
      dockerfile: Dockerfile
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
      neo4j_db:
        condition: service_healthy
    env_file:
      - ./.env.dev

        
volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_plugins:
  spark_checkpoints:
  zookeeper1-data:
  zookeeper1-log:
  zookeeper2-data:
  zookeeper2-log:
  zookeeper3-data:
  zookeeper3-log:
  kafka1-data:
  kafka2-data:
  kafka3-data: